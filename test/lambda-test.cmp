((env continue)
 (env proc argl unev continue temp1 temp2 val)
 (proc argl val)
 (
  (assign val (op make-compiled-procedure) (label entry1) (reg env))
  (goto (label after-lambda2))
 entry1
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const ()) (reg argl) (reg env))
  (assign val (const 1))
  (goto (reg continue))
 after-lambda2
  (perform (op define-variable!) (const no-func) (reg val) (reg env))
  (assign val (const no-func))
  (assign val (op make-compiled-procedure) (label entry3) (reg env))
  (goto (label after-lambda4))
 entry3
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (a)) (reg argl) (reg env))
  (assign val (op lookup-variable-value) (const a) (reg env))
  (goto (reg continue))
 after-lambda4
  (perform (op define-variable!) (const one-func) (reg val) (reg env))
  (assign val (const one-func))
  (assign val (op make-compiled-procedure) (label entry5) (reg env))
  (goto (label after-lambda6))
 entry5
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (a b)) (reg argl) (reg env))
  (assign proc (op lookup-variable-value) (const cons) (reg env))
  (assign val (op lookup-variable-value) (const b) (reg env))
  (assign argl (op list) (reg val))
  (assign val (op lookup-variable-value) (const a) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch7))
 compiled-branch8
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
 primitive-branch7
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
 after-call9
 after-lambda6
  (perform (op define-variable!) (const two-func) (reg val) (reg env))
  (assign val (const two-func))
  (assign val (op make-compiled-procedure) (label entry10) (reg env))
  (goto (label after-lambda11))
 entry10
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (a b c d)) (reg argl) (reg env))
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (assign val (op lookup-variable-value) (const a) (reg env))
  (assign argl (op list) (reg val))
  (assign val (op lookup-variable-value) (const b) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (assign val (op lookup-variable-value) (const c) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (assign val (op lookup-variable-value) (const d) (reg env))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch12))
 compiled-branch13
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
 primitive-branch12
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
 after-call14
 after-lambda11
  (perform (op define-variable!) (const mult-func) (reg val) (reg env))
  (assign val (const mult-func))
  (assign proc (op lookup-variable-value) (const list) (reg env))
  (save continue)
  (save proc)
  (save env)
  (assign proc (op lookup-variable-value) (const mult-func) (reg env))
  (assign val (const 7))
  (assign argl (op list) (reg val))
  (assign val (const 8))
  (assign argl (op cons) (reg val) (reg argl))
  (assign val (const 9))
  (assign argl (op cons) (reg val) (reg argl))
  (assign val (const 0))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch24))
 compiled-branch25
  (assign continue (label after-call26))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
 primitive-branch24
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
 after-call26
  (assign argl (op list) (reg val))
  (restore env)
  (save env)
  (save argl)
  (assign proc (op lookup-variable-value) (const two-func) (reg env))
  (assign val (const 4))
  (assign argl (op list) (reg val))
  (assign val (const 3))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch21))
 compiled-branch22
  (assign continue (label after-call23))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
 primitive-branch21
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
 after-call23
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore env)
  (save env)
  (save argl)
  (assign proc (op lookup-variable-value) (const one-func) (reg env))
  (assign val (const 2))
  (assign argl (op list) (reg val))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch18))
 compiled-branch19
  (assign continue (label after-call20))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
 primitive-branch18
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
 after-call20
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore env)
  (save argl)
  (assign proc (op lookup-variable-value) (const no-func) (reg env))
  (assign argl (const ()))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch15))
 compiled-branch16
  (assign continue (label after-call17))
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
 primitive-branch15
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
 after-call17
  (restore argl)
  (assign argl (op cons) (reg val) (reg argl))
  (restore proc)
  (restore continue)
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch27))
 compiled-branch28
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
 primitive-branch27
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
 after-call29
 )
)