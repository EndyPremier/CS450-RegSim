((env continue)
 (env proc argl unev continue temp1 temp2 val)
 (proc argl val)
 (
  (assign val (op make-compiled-procedure) (label entry1) (reg env))
  (goto (label after-lambda2))
 entry1
  (assign env (op compiled-procedure-env) (reg proc))
  (assign env (op extend-environment) (const (a . b)) (reg argl) (reg env))
  (assign val (op lookup-variable-value) (const b) (reg env))
  (goto (reg continue))
 after-lambda2
  (perform (op define-variable!) (const rest) (reg val) (reg env))
  (assign val (const rest))
  (assign proc (op lookup-variable-value) (const rest) (reg env))
  (assign val (const 4))
  (assign argl (op list) (reg val))
  (assign val (const 3))
  (assign argl (op cons) (reg val) (reg argl))
  (assign val (const 2))
  (assign argl (op cons) (reg val) (reg argl))
  (assign val (const 1))
  (assign argl (op cons) (reg val) (reg argl))
  (test (op primitive-procedure?) (reg proc))
  (branch (label primitive-branch3))
 compiled-branch4
  (assign val (op compiled-procedure-entry) (reg proc))
  (goto (reg val))
 primitive-branch3
  (assign val (op apply-primitive-procedure) (reg proc) (reg argl))
  (goto (reg continue))
 after-call5
 )
)